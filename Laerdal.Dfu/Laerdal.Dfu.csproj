<Project Sdk="MSBuild.Sdk.Extras/3.0.44">

    <!-- ==================== PACKAGE CONFIGURATION ==================== -->
    <PropertyGroup>
        <!-- it only makes sense to build xamarin.ios under osx because xcodebuild is only available there -->
        <TargetFrameworks>netstandard2.0;monoandroid12.0</TargetFrameworks>
        <TargetFrameworks Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'">$(TargetFrameworks);xamarin.ios10</TargetFrameworks>

        <Laerdal_Package_iOS_Dfu_Version>4.13.0</Laerdal_Package_iOS_Dfu_Version>
        <Laerdal_Package_Android_Dfu_Version>2.2.2</Laerdal_Package_Android_Dfu_Version>
        <Laerdal_Package_Android_Gson_Version>2.10</Laerdal_Package_Android_Gson_Version>

        <Laerdal_Package_Name>Laerdal.Dfu</Laerdal_Package_Name>
        <Laerdal_Package_Copyright>Fran√ßois Raminosona, Laerdal Medical</Laerdal_Package_Copyright>
        <Laerdal_Package_Description>Xamarin wrapper around Nordic.Dfu for iOS (NordicSemiconductor:IOS-Pods-DFU-Library:$(Laerdal_Package_iOS_Dfu_Version)) and Android (no.nordicsemi.android:dfu:$(Laerdal_Package_Android_Dfu_Version)).</Laerdal_Package_Description>
        <Laerdal_Package_Tags>Ble;Tools;Xamarin;Dfu;Bluetooth;Nordic;Semiconductor</Laerdal_Package_Tags>
        <!--<GithubAccessToken>ghp_XXXXXXXXX</GithubAccessToken>-->

        <DownloadNativeFiles Condition="'$(DownloadNativeFiles)' == ''">true</DownloadNativeFiles>
        <RunSharpie Condition="'$(RunSharpie)' == ''">true</RunSharpie>
    </PropertyGroup>

    <!-- ==================== DEFAULT CONFIGURATION ==================== -->
    <PropertyGroup>
        <LangVersion>9</LangVersion>
        <DebugSymbols>true</DebugSymbols>
        <OutputPath>bin\</OutputPath>
        <ErrorReport>prompt</ErrorReport>
        <WarningLevel>4</WarningLevel>
        <OutputType>Library</OutputType>

        <PackOnBuild>true</PackOnBuild>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

        <IncludeSource>True</IncludeSource>
        <IncludeSymbols>True</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>

        <!-- see : https://cezarypiatek.github.io/post/managing-output-in-sdk-projects/ -->
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
        <!-- warning MSB9004: ManifestResourceWithNoCulture item type is deprecated. Emit EmbeddedResource items instead, with metadata WithCulture='false', Type='Resx', and optional LogicalName. -->
        <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);MSB9004</MSBuildWarningsAsMessages>
        <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
        <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>

        <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
        <!-- see : https://github.com/xamarin/xamarin-macios/pull/12694 -->
        <NoBindingEmbedding>false</NoBindingEmbedding>

        <Deterministic>true</Deterministic>
    </PropertyGroup>


    <!-- ==================== DEFAULT CI CONFIGURATION ==================== -->
    <PropertyGroup>
        <!-- https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml&WT.mc_id=DT-MVP-5003978#system-variables -->
        <ContinuousIntegrationBuild Condition="'$(TF_BUILD)' == 'true'">true</ContinuousIntegrationBuild>
        <!-- https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables -->
        <ContinuousIntegrationBuild Condition="'$(GITHUB_ACTIONS)' == 'true'">true</ContinuousIntegrationBuild>
        <!-- https://docs.gitlab.com/ee/ci/variables/predefined_variables.html -->
        <ContinuousIntegrationBuild Condition="'$(GITLAB_CI)' == 'true'">true</ContinuousIntegrationBuild>
    </PropertyGroup>

    <!-- ==================== PACKAGING ==================== -->
    <PropertyGroup>
        <!-- Laerdal_Package_Name -->
        <RootNamespace>$(Laerdal_Package_Name)</RootNamespace>
        <PackageId>$(Laerdal_Package_Name)</PackageId>
        <AssemblyName>$(Laerdal_Package_Name)</AssemblyName>
        <Title>$(Laerdal_Package_Name)</Title>

        <!-- Laerdal_Package_Copyright -->
        <Authors>$(Laerdal_Package_Copyright)</Authors>
        <Owners>$(Laerdal_Package_Copyright)</Owners>
        <Copyright>$(Laerdal_Package_Copyright)</Copyright>

        <!-- Laerdal_Package_Description -->
        <Summary>$(Laerdal_Package_Description)</Summary>
        <Description>$(Laerdal_Package_Description)</Description>
        <PackageDescription>$(Laerdal_Package_Description)</PackageDescription>

        <!-- Extra files and properties -->
        <PackageTags>Laerdal;Internal;$(Laerdal_Package_Tags)</PackageTags>
        <PackageOutputPath>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), `../$(Laerdal_Package_Name).Output`))</PackageOutputPath>
        <PackageIconPath>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), `icon.png`))</PackageIconPath>
        <PackageLicencePath>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), `../LICENSE`))</PackageLicencePath>
        <PackageReadMePath>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), `../README.md`))</PackageReadMePath>
        <PackageIcon Condition="Exists('$(PackageIconPath)')">icon.png</PackageIcon>
        <PackageLicense Condition="Exists('$(PackageLicencePath)')">LICENSE</PackageLicense>
        <!-- https://github.com/NuGet/Home/issues/10791 -->
        <!-- <PackageReadmeFile Condition="Exists('$(PackageReadMePath)')">$(PackageReadMePath)</PackageReadmeFile> -->
    </PropertyGroup>
    <ItemGroup>
        <None Include="$(PackageIconPath)" Pack="true" PackagePath="\" Condition="Exists('$(PackageIconPath)')" />
        <None Include="$(PackageLicencePath)" Pack="true" PackagePath="\" Condition="Exists('$(PackageLicencePath)')" />
        <None Include="$(PackageReadMePath)" Pack="true" PackagePath="\" Condition="Exists('$(PackageReadMePath)')" />
    </ItemGroup>

    <!-- ==================== SOURCELINK ==================== -->
    <PropertyGroup>
        <!-- https://github.com/dotnet/sourcelink -->
        <!-- sourcelink: Declare that the Repository URL can be published to NuSpec -->
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <!-- sourcelink: Embed source files that are not tracked by the source control manager to the PDB -->
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <!-- sourcelink: Include PDB in the built .nupkg -->
        <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb;.md</AllowedOutputExtensionsInPackageBuildOutputFolder>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
    </ItemGroup>

    <!-- ==================== LOGGING ==================== -->
    <Target Name="PrintBuildInfo" BeforeTargets="CoreCompile">
        <Message Importance="High" Text="PackageId: $(PackageId)" />
        <Message Importance="High" Text="TargetFramework: $(TargetFramework)" />
        <Message Importance="High" Text="Configuration: $(Configuration)" />
        <Message Importance="High" Text="Platform: $(Platform)" />
        <Message Importance="High" Text="PackageVersion: $(PackageVersion)" />
        <Message Importance="High" Text="AssemblyVersion: $(AssemblyVersion)" />
        <Message Importance="High" Text="Version: $(Version)" />
        <Message Importance="High" Text="DefineConstants: $(DefineConstants)" />
        <Message Importance="High" Text="MSBuildRuntimeType: $(MSBuildRuntimeType)" />
    </Target>

    <!-- ==================== VERSION ==================== -->
    <PropertyGroup>
        <Laerdal_Version_Assembly Condition="'$(Laerdal_Version_Assembly)' == ''">1.0.0.0</Laerdal_Version_Assembly>
        <Laerdal_Version_Full Condition="'$(Laerdal_Version_Full)' == ''">1.0.0</Laerdal_Version_Full>
        <!-- Apply Version parts according to packaging standards -->
        <AssemblyVersion>$(Laerdal_Version_Assembly)</AssemblyVersion>
        <AssemblyFileVersion>$(Laerdal_Version_Assembly)</AssemblyFileVersion>
        <AssemblyInformationalVersion>$(Laerdal_Version_Full)</AssemblyInformationalVersion>
        <Version>$(Laerdal_Version_Full)</Version>
        <PackageVersion>$(Laerdal_Version_Full)</PackageVersion>
    </PropertyGroup>

    <!-- ==================== PLATFORM-SPECIFIC ==================== -->
    <!-- SHARED -->
    <ItemGroup>
        <Compile Include="Shared\**\*.cs" />
        <Compile Include="Properties\AssemblyInfo.cs" />
    </ItemGroup>

    <!-- NETSTANDARD -->
    <ItemGroup Condition=" $(TargetFramework.ToLower().StartsWith('netstandard')) ">
        <Compile Include="NetStandard\*.cs" />
    </ItemGroup>

    <!-- ANDROID -->
    <PropertyGroup Condition=" $(TargetFramework.ToLower().StartsWith('monoandroid')) ">
        <DebugType>pdbonly</DebugType>
        <IsBindingProject>true</IsBindingProject>
        <TargetFrameworkVersion>v12.0</TargetFrameworkVersion>
        <AndroidClassParser>class-parse</AndroidClassParser>
        <AndroidCodegenTarget>XAJavaInterop1</AndroidCodegenTarget>
        <DefineConstants>TRACE</DefineConstants>
        <!-- warning CS0618: 'IntentService' is obsolete: 'This class is obsoleted in this android platform' -->
        <!-- warning CS0618: 'IDfuSettingsConstants' is obsolete: 'This class is obsoleted in this android platform' -->
        <!-- warning CS0672: Member 'DfuBaseService.OnHandleIntent(Intent)' overrides obsolete member 'IntentService.OnHandleIntent(Intent?)' -->
        <NoWarn>$(NoWarn);CS0618;CS0672</NoWarn>
    </PropertyGroup>
    <ItemGroup Condition=" $(TargetFramework.ToLower().StartsWith('monoandroid')) ">
        <Reference Include="Mono.Android" />
        <Compile Include="Droid\*.cs" />
        <Compile Include="Droid\Specific\*.cs" />
        <EmbeddedReferenceJar Include="Droid\Jars\gson.jar" />
        <!-- Using locally built dfu.aar -->
        <!--<LibraryProjectZip Include="Droid\Jars\dfu.aar" /> -->
        <LibraryProjectZip Include="Droid\dfu-release.aar" />
        <TransformFile Include="Droid\Transforms\*.xml" />
        <PackageReference Include="Xamarin.AndroidX.Core" Version="1.8.0.1" />
    </ItemGroup>
    <Target Condition=" $(TargetFramework.ToLower().StartsWith('monoandroid')) AND $(DownloadNativeFiles) " Name="_DownloadAndroidNativeFiles" BeforeTargets="_CreateBindingResourceArchive">
        <!-- Using locally built dfu.aar -->
        <!--<DownloadFile DestinationFileName="dfu.aar" DestinationFolder="Droid\Jars\" SourceUrl="https://repo1.maven.org/maven2/no/nordicsemi/android/dfu/$(Laerdal_Package_Android_Dfu_Version)/dfu-$(Laerdal_Package_Android_Dfu_Version).aar"/>-->
        <DownloadFile DestinationFileName="gson.jar" DestinationFolder="Droid\Jars\" SourceUrl="https://repo1.maven.org/maven2/com/google/code/gson/gson/$(Laerdal_Package_Android_Gson_Version)/gson-$(Laerdal_Package_Android_Gson_Version).jar"/>
    </Target>

    <!-- IOS -->
    <PropertyGroup Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) ">
        <IsBindingProject>true</IsBindingProject>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <MtouchExtraArgs>-v -v -v -v</MtouchExtraArgs>
        <!-- warning CS0114: 'LegacyDFUServiceInitiator.StartWithTargetWithIdentifier(NSUuid)' hides inherited member 'DFUServiceInitiator.StartWithTargetWithIdentifier(NSUuid)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword. -->
        <!-- warning CS0114: 'SecureDFUServiceInitiator.StartWithTargetWithIdentifier(NSUuid)' hides inherited member 'DFUServiceInitiator.StartWithTargetWithIdentifier(NSUuid)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword. -->
        <NoWarn>$(NoWarn);CS0114</NoWarn>
    </PropertyGroup>
    <ItemGroup Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) ">
        <Reference Include="Xamarin.iOS" />
        <Reference Include="netstandard" />
        <Compile Include="iOS\*.cs" />
        <Compile Include="iOS\Specific\*.cs" />
        <ObjcBindingCoreSource Include="iOS\ObjcBinding\Structs.cs" />
        <ObjcBindingApiDefinition Include="iOS\ObjcBinding\ApiDefinition.cs" />
        <PackageReference Include="Xamarin.iOS.SwiftRuntimeSupport" Version="0.2.1" />
        <PackageReference Include="Xamarin.Swift" Version="1.0.11" />
    </ItemGroup>
    <!-- Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) AND $(DownloadNativeFiles)"-->
    <Target Name="_DownloadIosNativeFiles" BeforeTargets="BeforeBuild" Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) AND $(DownloadNativeFiles)">
        <!-- Download iOSDFULibrary.xcframework with Carthage-->
        <WriteLinesToFile File="iOS\Carthage\Cartfile" Lines='github "NordicSemiconductor/IOS-DFU-Library" == $(Laerdal_Package_iOS_Dfu_Version)' Overwrite="true"/>
        <Exec WorkingDirectory="iOS\Carthage\" Command="carthage update --use-xcframeworks --platform iOS"/>

    </Target>
    <Target Name="_BuildFatiOSDFULibrary" AfterTargets="_DownloadIosNativeFiles" Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) AND $(DownloadNativeFiles)">
        <PropertyGroup>
            <_library_name>iOSDFULibrary</_library_name>
            <_xcframework>iOS/Carthage/Carthage/Build/$(_library_name).xcframework</_xcframework>

            <_iphonesimulator>$(_xcframework)/ios-arm64_x86_64-simulator</_iphonesimulator>
            <_iphoneos>$(_xcframework)/ios-arm64</_iphoneos>

            <_iphonesimulator_framework>$(_iphonesimulator)/$(_library_name).framework</_iphonesimulator_framework>
            <_iphoneos_framework>$(_iphoneos)/$(_library_name).framework</_iphoneos_framework>

            <_iphonesimulator_dSYM>$(_iphonesimulator)/dSYMs/$(_library_name).framework.dSYM</_iphonesimulator_dSYM>
            <_iphoneos_dSYM>$(_iphoneos)/dSYMs/$(_library_name).framework.dSYM</_iphoneos_dSYM>
        </PropertyGroup>
        <Error Text="'$(_iphoneos_framework)' could not be found. Please run 'carthage update' in the iOS folder." Condition=" !Exists('$(_iphoneos_framework)') " />
        <Error Text="'$(_iphonesimulator_framework)' could not be found. Please run 'carthage update' in the iOS folder." Condition=" !Exists('$(_iphonesimulator_framework)') " />

        <Exec WorkingDirectory="$(_iphonesimulator_framework)" Command="lipo -info $(_library_name)"/>
        <Exec WorkingDirectory="$(_iphoneos_framework)" Command="lipo -info $(_library_name)"/>

        <Exec WorkingDirectory="$(_iphonesimulator_framework)" Command="lipo -remove arm64 -output $(_library_name) $(_library_name)"/>
        <Exec Command="lipo -create $(_iphoneos_framework)/$(_library_name) $(_iphonesimulator_framework)/$(_library_name) -output $(_iphoneos_framework)/$(_library_name)"/>

        <Exec WorkingDirectory="$(_iphoneos_framework)" Command="lipo -info $(_library_name)"/>
    </Target>

    <Target Name="_BuildFatZIPFoundation" AfterTargets="_BuildFatiOSDFULibrary" Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) AND $(DownloadNativeFiles)">
        <PropertyGroup>
            <_library_name>ZIPFoundation</_library_name>
            <_xcframework>iOS/Carthage/Carthage/Build/$(_library_name).xcframework</_xcframework>

            <_iphonesimulator>$(_xcframework)/ios-arm64_x86_64-simulator</_iphonesimulator>
            <_iphoneos>$(_xcframework)/ios-arm64</_iphoneos>

            <_iphonesimulator_framework>$(_iphonesimulator)/$(_library_name).framework</_iphonesimulator_framework>
            <_iphoneos_framework>$(_iphoneos)/$(_library_name).framework</_iphoneos_framework>

            <_iphonesimulator_dSYM>$(_iphonesimulator)/dSYMs/$(_library_name).framework.dSYM</_iphonesimulator_dSYM>
            <_iphoneos_dSYM>$(_iphoneos)/dSYMs/$(_library_name).framework.dSYM</_iphoneos_dSYM>
        </PropertyGroup>
        <Error Text="'$(_iphoneos_framework)' could not be found. Please run 'carthage update' in the iOS folder." Condition=" !Exists('$(_iphoneos_framework)') " />
        <Error Text="'$(_iphonesimulator_framework)' could not be found. Please run 'carthage update' in the iOS folder." Condition=" !Exists('$(_iphonesimulator_framework)') " />

        <Exec WorkingDirectory="$(_iphonesimulator_framework)" Command="lipo -info $(_library_name)"/>
        <Exec WorkingDirectory="$(_iphoneos_framework)" Command="lipo -info $(_library_name)"/>

        <Exec WorkingDirectory="$(_iphonesimulator_framework)" Command="lipo -remove arm64 -output $(_library_name) $(_library_name)"/>
        <Exec Command="lipo -create $(_iphoneos_framework)/$(_library_name) $(_iphonesimulator_framework)/$(_library_name) -output $(_iphoneos_framework)/$(_library_name)"/>

        <Exec WorkingDirectory="$(_iphoneos_framework)" Command="lipo -info $(_library_name)"/>
    </Target>
    <Target Name="_RunSharpie" Condition=" $(RunSharpie)" AfterTargets="_BuildFatZIPFoundation">
        <Exec Command="sharpie bind -sdk iphoneos -o iOS/Sharpie --namespace=Laerdal.Dfu.iOS -f iOS/Carthage/Carthage/Build/iOSDFULibrary.xcframework/ios-arm64/iOSDFULibrary.framework" EnvironmentVariables="GITHUB_ACCESS_TOKEN=$(GithubAccessToken)"/>
    </Target>
    <ItemGroup Condition=" $(TargetFramework.ToLower().StartsWith('xamarin.ios')) ">
         <!-- Frameworks\iOSDFULibrary.framework -->
         <None Include="iOS/Carthage/Carthage/Build/iOSDFULibrary.xcframework/ios-arm64/iOSDFULibrary.framework\iOSDFULibrary">
            <Link>Frameworks\iOSDFULibrary.framework</Link>
        </None>
        <NativeReference Include="iOS/Carthage/Carthage/Build/iOSDFULibrary.xcframework/ios-arm64/iOSDFULibrary.framework">
            <Kind>Framework</Kind>
            <Frameworks>Foundation</Frameworks>
        </NativeReference>

        <!-- Frameworks\ZIPFoundation.framework -->
        <None Include="iOS/Carthage/Carthage/Build/ZIPFoundation.xcframework/ios-arm64/ZIPFoundation.framework\ZIPFoundation">
            <Link>Frameworks\ZIPFoundation.framework</Link>
        </None>
        <NativeReference Include="iOS/Carthage/Carthage/Build/ZIPFoundation.xcframework/ios-arm64/ZIPFoundation.framework">
            <Kind>Framework</Kind>
            <Frameworks>Foundation</Frameworks>
        </NativeReference>
    </ItemGroup>
</Project>